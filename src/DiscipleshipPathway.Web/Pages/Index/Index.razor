@page "/"

@inject IStateService StateService
@inject IAssessmentService AssessmentService
@inject NavigationManager NavigationManager

<PageTitle>Discipleship Pathway Assessment</PageTitle>

@if (Assessment is not null)
{
    <MudText Typo="Typo.h2" Align="Align.Center">Discipleship Pathway Assessment</MudText>
    <div class="d-flex flex-column mt-4">
        @foreach (var questionsBySection in Assessment.Questions.GroupBy(q => q.Section))
        {
            <MudText Typo="Typo.h5">Section @questionsBySection.Key</MudText>
            <MudDivider Class="mb-4"   />
            @foreach (var question in questionsBySection)
            {
                <MudText Typo="Typo.body1">@($"{question.Order}) {question.Text}")</MudText>
                <div class="d-flex flex-row align-center mb-2">
                    <span class="flex-grow-0">Totally Disagree</span>
                    <MudRadioGroup Class="flex-grow-1" InputClass="d-flex flex-row justify-space-between" Required="true" T="int" SelectedOptionChanged="@(answer => Assessment.AnswerQuestion(question.Id, answer))">
                    @for (int i = 0; i < 5; i++)
                    {
                        <MudRadio Option="@(i + 1)" Color="Color.Primary" Size="Size.Small"></MudRadio>
                    }
                    </MudRadioGroup>
                    <span class="flex-grow-0">Totally Agree</span>
                </div>
            }
        }
    </div>

    <MudButton OnClick="CalculateAndViewResults" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">
        View Results
    </MudButton>    
}

@code {
    public Assessment? Assessment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Assessment = await AssessmentService.GetAssessment();
    }

    private void CalculateAndViewResults()
    {
        var results = Assessment?.CalculateResults();

        StateService.SaveAssessmentResults(results);
        NavigationManager.NavigateTo("/results");
    }
}