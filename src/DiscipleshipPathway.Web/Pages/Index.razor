@page "/"
@using ChartJs.Blazor.RadarChart


@inject IAssessmentService AssessmentService;

<PageTitle>Index</PageTitle>

@if (Assessment is not null)
{
    @foreach (var questionsBySection in Assessment.Questions.GroupBy(q => q.Section))
    {
        <p>Section @questionsBySection.Key</p>

        @foreach (var question in questionsBySection)
        {
            <p>@question.Text</p>
            <MudRadioGroup T="int" SelectedOptionChanged="@(answer => Assessment.AnswerQuestion(question.Id, answer))">
                @for (int i = 0; i < 5; i++)
                {
                    <MudRadio Option="@(i + 1)" Color="Color.Primary" Size="Size.Small"></MudRadio>
                }
            </MudRadioGroup>
        }
    }

    <MudButton OnClick="CalculateResults" Color="Color.Primary" Variant="Variant.Filled">
        Calculate Results
    </MudButton>

    @if (Results is not null)
    {
        <p><strong>Results</strong></p>

        <Chart Config="chartConfig"></Chart>
    }
}
else
{
    <p>Loading assessment...</p>
}

@code {
    public Assessment? Assessment { get; set; }
    public AssessmentResults? Results { get; set; }

    private bool calculatingResults = false;

    private RadarConfig? chartConfig;

    protected override async Task OnInitializedAsync()
    {
        Assessment = await AssessmentService.GetAssessment();
    }

    private void CalculateResults()
    {
        Results = Assessment.CalculateResults();

        chartConfig = new RadarConfig()
            {
                Options = new RadarOptions()
                {
                    Responsive = true,
                    Title = new ChartJs.Blazor.Common.OptionsTitle()
                    {
                        Text = "Results",
                        Display = true
                    }
                }
            };

        var dataset = new RadarDataset<double>();

        foreach (var sectionAverage in Results.AverageBySection)
        {
            chartConfig.Data.Labels.Add($"Section {sectionAverage.Section}");
            dataset.Add(sectionAverage.Average);
        }

        chartConfig.Data.Datasets.Add(dataset);
        chartConfig.Options.Scale = new ChartJs.Blazor.Common.Axes.LinearRadialAxis()
            {
                Ticks = new ChartJs.Blazor.Common.Axes.Ticks.LinearRadialTicks()
                {
                    BeginAtZero = true,
                    Max = 5,
                    Min = 0
                }
            };
    }
}
